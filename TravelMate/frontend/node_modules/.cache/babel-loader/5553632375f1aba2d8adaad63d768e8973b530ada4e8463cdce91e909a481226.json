{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\EECS581\\\\TravelMate\\\\frontend\\\\src\\\\components\\\\ItineraryManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport api from '../services/api';\n\n/*\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [tripOptions, setTripOptions] = useState([]); // Stores available trips for the dropdown\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Retrieve userId from localStorage\r\n  const userId = localStorage.getItem('user_id');\r\n\r\n  // Fetch user's trips when the component mounts\r\n  useEffect(() => {\r\n    const fetchTrips = async () => {\r\n      try {\r\n        const response = await api.get(`/trips?user_id=${userId}`);\r\n        setTripOptions(response.data); // Store trips for dropdown\r\n      } catch (error) {\r\n        console.error(\"Error fetching trips:\", error);\r\n        alert(\"Failed to load trips.\");\r\n      }\r\n    };\r\n    fetchTrips();\r\n  }, [userId]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value); // Update selected trip name\r\n  };\r\n\r\n  const addActivity = async (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      try {\r\n        // Find the selected trip ID\r\n        const tripId = tripOptions.find(t => t.name === typedTripName).id;\r\n\r\n        // Send the new activity to the backend\r\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\r\n\r\n        // Update local state\r\n        setTrips((prevTrips) => {\r\n          const existingActivities = prevTrips[typedTripName] || [];\r\n          return {\r\n            ...prevTrips,\r\n            [typedTripName]: [...existingActivities, newActivity],\r\n          };\r\n        });\r\n\r\n        // Reset form fields after adding\r\n        setActivity({ name: '', date: '', time: '', location: '' });\r\n        setTypedTripName('');\r\n      } catch (error) {\r\n        alert('Failed to add activity: ' + error.message);\r\n      }\r\n    } else {\r\n      alert('Please fill out all fields and select a trip name');\r\n    }\r\n  };\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItineraryManager = () => {\n  _s();\n  const [trips, setTrips] = useState({});\n  const [tripOptions, setTripOptions] = useState([]); // Stores available trips for the dropdown\n  const [typedTripName, setTypedTripName] = useState('');\n  const [activity, setActivity] = useState({\n    name: '',\n    date: '',\n    time: '',\n    location: ''\n  });\n\n  // Retrieve userId from localStorage\n  const userId = localStorage.getItem('user_id');\n\n  // Fetch user's trips when the component mounts\n  useEffect(() => {\n    const fetchTrips = async () => {\n      try {\n        const response = await api.get(`/trips?user_id=${userId}`);\n        setTripOptions(response.data); // Store trips for dropdown\n\n        // Fetch activities for each trip and set them in state\n        const tripsWithActivities = {};\n        for (const trip of response.data) {\n          const activitiesResponse = await api.get(`/trips/${trip.id}/itinerary/activities`);\n          tripsWithActivities[trip.name] = activitiesResponse.data;\n        }\n        setTrips(tripsWithActivities);\n      } catch (error) {\n        console.error(\"Error fetching trips or activities:\", error);\n        alert(\"Failed to load trips or activities.\");\n      }\n    };\n    fetchTrips();\n  }, [userId]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setActivity(prevActivity => ({\n      ...prevActivity,\n      [name]: value\n    }));\n  };\n  const handleTripNameChange = e => {\n    setTypedTripName(e.target.value); // Update selected trip name\n  };\n  const addActivity = async e => {\n    e.preventDefault();\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\n      const newActivity = {\n        ...activity\n      };\n      try {\n        // Find the selected trip ID\n        const tripId = tripOptions.find(t => t.name === typedTripName).id;\n\n        // Send the new activity to the backend\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\n\n        // Fetch updated activities for the selected trip\n        const activitiesResponse = await api.get(`/trips/${tripId}/itinerary/activities`);\n\n        // Update local state with the new list of activities for the selected trip\n        setTrips(prevTrips => ({\n          ...prevTrips,\n          [typedTripName]: activitiesResponse.data\n        }));\n\n        // Reset form fields after adding\n        setActivity({\n          name: '',\n          date: '',\n          time: '',\n          location: ''\n        });\n        setTypedTripName('');\n      } catch (error) {\n        alert('Failed to add activity: ' + error.message);\n      }\n    } else {\n      alert('Please fill out all fields and select a trip name');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"itinerary-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Itinerary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addActivity,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Trip Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: typedTripName,\n          onChange: handleTripNameChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a trip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), tripOptions.map(trip => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: trip.name,\n            children: trip.name\n          }, trip.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          value: activity.name,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"date\",\n          value: activity.date,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Time:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          name: \"time\",\n          value: activity.time,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Location:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"location\",\n          value: activity.location,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Planned Activities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), Object.keys(trips).length > 0 ? Object.keys(trips).map(tripName => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trip-activities\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: tripName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: trips[tripName].map((activity, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: activity.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 19\n          }, this), \" - \", activity.date, \" at \", activity.time, \", \", activity.location]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, tripName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No activities added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(ItineraryManager, \"EpTBbuFi+R7qxcP9ToXGz7LP5ho=\");\n_c = ItineraryManager;\nexport default ItineraryManager;\n\n/*\r\nimport React, { useState } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Retrieve userId from localStorage\r\n  const userId = localStorage.getItem('user_id');\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value);\r\n  };\r\n\r\n  const addActivity = async (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      try {\r\n        // Fetch trips to find the ID\r\n        const tripResponse = await api.get(`/trips?user_id=${userId}`);\r\n        const tripId = tripResponse.data.find(t => t.name === typedTripName).id;\r\n\r\n        // Send the new activity to the backend\r\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\r\n\r\n        // Update local state\r\n        setTrips((prevTrips) => {\r\n          const existingActivities = prevTrips[typedTripName] || [];\r\n          return {\r\n            ...prevTrips,\r\n            [typedTripName]: [...existingActivities, newActivity],\r\n          };\r\n        });\r\n\r\n        // Reset form fields after adding\r\n        setActivity({ name: '', date: '', time: '', location: '' });\r\n        setTypedTripName('');\r\n      } catch (error) {\r\n        alert('Failed to add activity: ' + error.message);\r\n      }\r\n    } else {\r\n      alert('Please fill out all fields and provide a trip name');\r\n    }\r\n  };\r\n\r\n  // Function to fetch activities for a specific trip\r\n  const fetchActivities = async (tripId) => {\r\n    try {\r\n      const response = await api.get(`/trips/${tripId}/activities`);\r\n      setTrips(prev => ({ ...prev, [tripId]: response.data }));\r\n    } catch (error) {\r\n      console.error(\"Error fetching activities:\", error);\r\n      alert('Failed to load activities for this trip.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"itinerary-manager\">\r\n      <h2>Create Itinerary</h2>\r\n      <form onSubmit={addActivity}>\r\n        <div>\r\n          <label>Trip Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tripName\"\r\n            value={typedTripName}\r\n            onChange={handleTripNameChange}\r\n            placeholder=\"Enter trip name or choose an existing one\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={activity.name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={activity.date}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Time:</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={activity.time}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            value={activity.location}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add Activity</button>\r\n      </form>\r\n\r\n      <h3>Planned Activities</h3>\r\n      {Object.keys(trips).length > 0 ? (\r\n        Object.keys(trips).map((tripName) => (\r\n          <div key={tripName} className=\"trip-activities\">\r\n            <h4>{tripName}</h4>\r\n            <ul>\r\n              {trips[tripName].map((activity, index) => (\r\n                <li key={index}>\r\n                  <strong>{activity.name}</strong> - {activity.date} at {activity.time}, {activity.location}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No activities added yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItineraryManager;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ItineraryManager\");","map":{"version":3,"names":["React","useEffect","useState","api","jsxDEV","_jsxDEV","ItineraryManager","_s","trips","setTrips","tripOptions","setTripOptions","typedTripName","setTypedTripName","activity","setActivity","name","date","time","location","userId","localStorage","getItem","fetchTrips","response","get","data","tripsWithActivities","trip","activitiesResponse","id","error","console","alert","handleInputChange","e","value","target","prevActivity","handleTripNameChange","addActivity","preventDefault","newActivity","tripId","find","t","post","prevTrips","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","map","type","Object","keys","length","tripName","index","_c","$RefreshReg$"],"sources":["C:/Users/taylo/Desktop/EECS581/TravelMate/frontend/src/components/ItineraryManager.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport api from '../services/api';\r\n\r\n/*\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [tripOptions, setTripOptions] = useState([]); // Stores available trips for the dropdown\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Retrieve userId from localStorage\r\n  const userId = localStorage.getItem('user_id');\r\n\r\n  // Fetch user's trips when the component mounts\r\n  useEffect(() => {\r\n    const fetchTrips = async () => {\r\n      try {\r\n        const response = await api.get(`/trips?user_id=${userId}`);\r\n        setTripOptions(response.data); // Store trips for dropdown\r\n      } catch (error) {\r\n        console.error(\"Error fetching trips:\", error);\r\n        alert(\"Failed to load trips.\");\r\n      }\r\n    };\r\n    fetchTrips();\r\n  }, [userId]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value); // Update selected trip name\r\n  };\r\n\r\n  const addActivity = async (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      try {\r\n        // Find the selected trip ID\r\n        const tripId = tripOptions.find(t => t.name === typedTripName).id;\r\n\r\n        // Send the new activity to the backend\r\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\r\n\r\n        // Update local state\r\n        setTrips((prevTrips) => {\r\n          const existingActivities = prevTrips[typedTripName] || [];\r\n          return {\r\n            ...prevTrips,\r\n            [typedTripName]: [...existingActivities, newActivity],\r\n          };\r\n        });\r\n\r\n        // Reset form fields after adding\r\n        setActivity({ name: '', date: '', time: '', location: '' });\r\n        setTypedTripName('');\r\n      } catch (error) {\r\n        alert('Failed to add activity: ' + error.message);\r\n      }\r\n    } else {\r\n      alert('Please fill out all fields and select a trip name');\r\n    }\r\n  };\r\n*/\r\n\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [tripOptions, setTripOptions] = useState([]); // Stores available trips for the dropdown\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Retrieve userId from localStorage\r\n  const userId = localStorage.getItem('user_id');\r\n\r\n  // Fetch user's trips when the component mounts\r\n  useEffect(() => {\r\n    const fetchTrips = async () => {\r\n      try {\r\n        const response = await api.get(`/trips?user_id=${userId}`);\r\n        setTripOptions(response.data); // Store trips for dropdown\r\n\r\n        // Fetch activities for each trip and set them in state\r\n        const tripsWithActivities = {};\r\n        for (const trip of response.data) {\r\n          const activitiesResponse = await api.get(`/trips/${trip.id}/itinerary/activities`);\r\n          tripsWithActivities[trip.name] = activitiesResponse.data;\r\n        }\r\n        setTrips(tripsWithActivities);\r\n      } catch (error) {\r\n        console.error(\"Error fetching trips or activities:\", error);\r\n        alert(\"Failed to load trips or activities.\");\r\n      }\r\n    };\r\n    fetchTrips();\r\n  }, [userId]);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value); // Update selected trip name\r\n  };\r\n\r\n  const addActivity = async (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      try {\r\n        // Find the selected trip ID\r\n        const tripId = tripOptions.find(t => t.name === typedTripName).id;\r\n\r\n        // Send the new activity to the backend\r\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\r\n\r\n        // Fetch updated activities for the selected trip\r\n        const activitiesResponse = await api.get(`/trips/${tripId}/itinerary/activities`);\r\n        \r\n        // Update local state with the new list of activities for the selected trip\r\n        setTrips((prevTrips) => ({\r\n          ...prevTrips,\r\n          [typedTripName]: activitiesResponse.data,\r\n        }));\r\n\r\n        // Reset form fields after adding\r\n        setActivity({ name: '', date: '', time: '', location: '' });\r\n        setTypedTripName('');\r\n      } catch (error) {\r\n        alert('Failed to add activity: ' + error.message);\r\n      }\r\n    } else {\r\n      alert('Please fill out all fields and select a trip name');\r\n    }\r\n  };\r\n\r\n  \r\n  return (\r\n    <div className=\"itinerary-manager\">\r\n      <h2>Create Itinerary</h2>\r\n      <form onSubmit={addActivity}>\r\n        <div>\r\n          <label>Trip Name:</label>\r\n          <select value={typedTripName} onChange={handleTripNameChange}>\r\n            <option value=\"\">Select a trip</option>\r\n            {tripOptions.map((trip) => (\r\n              <option key={trip.id} value={trip.name}>\r\n                {trip.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={activity.name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={activity.date}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Time:</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={activity.time}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            value={activity.location}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add Activity</button>\r\n      </form>\r\n\r\n      <h3>Planned Activities</h3>\r\n      {Object.keys(trips).length > 0 ? (\r\n        Object.keys(trips).map((tripName) => (\r\n          <div key={tripName} className=\"trip-activities\">\r\n            <h4>{tripName}</h4>\r\n            <ul>\r\n              {trips[tripName].map((activity, index) => (\r\n                <li key={index}>\r\n                  <strong>{activity.name}</strong> - {activity.date} at {activity.time}, {activity.location}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No activities added yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItineraryManager;\r\n\r\n\r\n/*\r\nimport React, { useState } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Retrieve userId from localStorage\r\n  const userId = localStorage.getItem('user_id');\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value);\r\n  };\r\n\r\n  const addActivity = async (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      try {\r\n        // Fetch trips to find the ID\r\n        const tripResponse = await api.get(`/trips?user_id=${userId}`);\r\n        const tripId = tripResponse.data.find(t => t.name === typedTripName).id;\r\n\r\n        // Send the new activity to the backend\r\n        await api.post(`/trips/${tripId}/itinerary/activities`, newActivity);\r\n\r\n        // Update local state\r\n        setTrips((prevTrips) => {\r\n          const existingActivities = prevTrips[typedTripName] || [];\r\n          return {\r\n            ...prevTrips,\r\n            [typedTripName]: [...existingActivities, newActivity],\r\n          };\r\n        });\r\n\r\n        // Reset form fields after adding\r\n        setActivity({ name: '', date: '', time: '', location: '' });\r\n        setTypedTripName('');\r\n      } catch (error) {\r\n        alert('Failed to add activity: ' + error.message);\r\n      }\r\n    } else {\r\n      alert('Please fill out all fields and provide a trip name');\r\n    }\r\n  };\r\n\r\n  // Function to fetch activities for a specific trip\r\n  const fetchActivities = async (tripId) => {\r\n    try {\r\n      const response = await api.get(`/trips/${tripId}/activities`);\r\n      setTrips(prev => ({ ...prev, [tripId]: response.data }));\r\n    } catch (error) {\r\n      console.error(\"Error fetching activities:\", error);\r\n      alert('Failed to load activities for this trip.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"itinerary-manager\">\r\n      <h2>Create Itinerary</h2>\r\n      <form onSubmit={addActivity}>\r\n        <div>\r\n          <label>Trip Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tripName\"\r\n            value={typedTripName}\r\n            onChange={handleTripNameChange}\r\n            placeholder=\"Enter trip name or choose an existing one\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={activity.name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={activity.date}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Time:</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={activity.time}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            value={activity.location}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add Activity</button>\r\n      </form>\r\n\r\n      <h3>Planned Activities</h3>\r\n      {Object.keys(trips).length > 0 ? (\r\n        Object.keys(trips).map((tripName) => (\r\n          <div key={tripName} className=\"trip-activities\">\r\n            <h4>{tripName}</h4>\r\n            <ul>\r\n              {trips[tripName].map((activity, index) => (\r\n                <li key={index}>\r\n                  <strong>{activity.name}</strong> - {activity.date} at {activity.time}, {activity.location}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No activities added yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItineraryManager;\r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxEA,SAAAC,MAAA,IAAAC,OAAA;AA0EA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACpD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACvCc,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,EAAE;IACRC,QAAQ,EAAE;EACZ,CAAC,CAAC;;EAEF;EACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;;EAE9C;EACArB,SAAS,CAAC,MAAM;IACd,MAAMsB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMrB,GAAG,CAACsB,GAAG,CAAC,kBAAkBL,MAAM,EAAE,CAAC;QAC1DT,cAAc,CAACa,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;;QAE/B;QACA,MAAMC,mBAAmB,GAAG,CAAC,CAAC;QAC9B,KAAK,MAAMC,IAAI,IAAIJ,QAAQ,CAACE,IAAI,EAAE;UAChC,MAAMG,kBAAkB,GAAG,MAAM1B,GAAG,CAACsB,GAAG,CAAC,UAAUG,IAAI,CAACE,EAAE,uBAAuB,CAAC;UAClFH,mBAAmB,CAACC,IAAI,CAACZ,IAAI,CAAC,GAAGa,kBAAkB,CAACH,IAAI;QAC1D;QACAjB,QAAQ,CAACkB,mBAAmB,CAAC;MAC/B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DE,KAAK,CAAC,qCAAqC,CAAC;MAC9C;IACF,CAAC;IACDV,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,MAAMc,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAM;MAAEnB,IAAI;MAAEoB;IAAM,CAAC,GAAGD,CAAC,CAACE,MAAM;IAChCtB,WAAW,CAAEuB,YAAY,KAAM;MAC7B,GAAGA,YAAY;MACf,CAACtB,IAAI,GAAGoB;IACV,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,oBAAoB,GAAIJ,CAAC,IAAK;IAClCtB,gBAAgB,CAACsB,CAAC,CAACE,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC;EACpC,CAAC;EAED,MAAMI,WAAW,GAAG,MAAOL,CAAC,IAAK;IAC/BA,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAI3B,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACI,IAAI,IAAIJ,QAAQ,CAACK,QAAQ,IAAIP,aAAa,EAAE;MACzF,MAAM8B,WAAW,GAAG;QAAE,GAAG5B;MAAS,CAAC;MAEnC,IAAI;QACF;QACA,MAAM6B,MAAM,GAAGjC,WAAW,CAACkC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC7B,IAAI,KAAKJ,aAAa,CAAC,CAACkB,EAAE;;QAEjE;QACA,MAAM3B,GAAG,CAAC2C,IAAI,CAAC,UAAUH,MAAM,uBAAuB,EAAED,WAAW,CAAC;;QAEpE;QACA,MAAMb,kBAAkB,GAAG,MAAM1B,GAAG,CAACsB,GAAG,CAAC,UAAUkB,MAAM,uBAAuB,CAAC;;QAEjF;QACAlC,QAAQ,CAAEsC,SAAS,KAAM;UACvB,GAAGA,SAAS;UACZ,CAACnC,aAAa,GAAGiB,kBAAkB,CAACH;QACtC,CAAC,CAAC,CAAC;;QAEH;QACAX,WAAW,CAAC;UAAEC,IAAI,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,QAAQ,EAAE;QAAG,CAAC,CAAC;QAC3DN,gBAAgB,CAAC,EAAE,CAAC;MACtB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdE,KAAK,CAAC,0BAA0B,GAAGF,KAAK,CAACiB,OAAO,CAAC;MACnD;IACF,CAAC,MAAM;MACLf,KAAK,CAAC,mDAAmD,CAAC;IAC5D;EACF,CAAC;EAGD,oBACE5B,OAAA;IAAK4C,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC7C,OAAA;MAAA6C,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzBjD,OAAA;MAAMkD,QAAQ,EAAEf,WAAY;MAAAU,QAAA,gBAC1B7C,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAO;QAAU;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACzBjD,OAAA;UAAQ+B,KAAK,EAAExB,aAAc;UAAC4C,QAAQ,EAAEjB,oBAAqB;UAAAW,QAAA,gBAC3D7C,OAAA;YAAQ+B,KAAK,EAAC,EAAE;YAAAc,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACtC5C,WAAW,CAAC+C,GAAG,CAAE7B,IAAI,iBACpBvB,OAAA;YAAsB+B,KAAK,EAAER,IAAI,CAACZ,IAAK;YAAAkC,QAAA,EACpCtB,IAAI,CAACZ;UAAI,GADCY,IAAI,CAACE,EAAE;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEZ,CACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNjD,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBjD,OAAA;UACEqD,IAAI,EAAC,MAAM;UACX1C,IAAI,EAAC,MAAM;UACXoB,KAAK,EAAEtB,QAAQ,CAACE,IAAK;UACrBwC,QAAQ,EAAEtB;QAAkB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjD,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBjD,OAAA;UACEqD,IAAI,EAAC,MAAM;UACX1C,IAAI,EAAC,MAAM;UACXoB,KAAK,EAAEtB,QAAQ,CAACG,IAAK;UACrBuC,QAAQ,EAAEtB;QAAkB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjD,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAO;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACpBjD,OAAA;UACEqD,IAAI,EAAC,MAAM;UACX1C,IAAI,EAAC,MAAM;UACXoB,KAAK,EAAEtB,QAAQ,CAACI,IAAK;UACrBsC,QAAQ,EAAEtB;QAAkB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjD,OAAA;QAAA6C,QAAA,gBACE7C,OAAA;UAAA6C,QAAA,EAAO;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACxBjD,OAAA;UACEqD,IAAI,EAAC,MAAM;UACX1C,IAAI,EAAC,UAAU;UACfoB,KAAK,EAAEtB,QAAQ,CAACK,QAAS;UACzBqC,QAAQ,EAAEtB;QAAkB;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNjD,OAAA;QAAQqD,IAAI,EAAC,QAAQ;QAAAR,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eAEPjD,OAAA;MAAA6C,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC1BK,MAAM,CAACC,IAAI,CAACpD,KAAK,CAAC,CAACqD,MAAM,GAAG,CAAC,GAC5BF,MAAM,CAACC,IAAI,CAACpD,KAAK,CAAC,CAACiD,GAAG,CAAEK,QAAQ,iBAC9BzD,OAAA;MAAoB4C,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC7C7C,OAAA;QAAA6C,QAAA,EAAKY;MAAQ;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnBjD,OAAA;QAAA6C,QAAA,EACG1C,KAAK,CAACsD,QAAQ,CAAC,CAACL,GAAG,CAAC,CAAC3C,QAAQ,EAAEiD,KAAK,kBACnC1D,OAAA;UAAA6C,QAAA,gBACE7C,OAAA;YAAA6C,QAAA,EAASpC,QAAQ,CAACE;UAAI;YAAAmC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,OAAG,EAACxC,QAAQ,CAACG,IAAI,EAAC,MAAI,EAACH,QAAQ,CAACI,IAAI,EAAC,IAAE,EAACJ,QAAQ,CAACK,QAAQ;QAAA,GADlF4C,KAAK;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA,GARGQ,QAAQ;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASb,CACN,CAAC,gBAEFjD,OAAA;MAAA6C,QAAA,EAAG;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC/B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC/C,EAAA,CA1JID,gBAAgB;AAAA0D,EAAA,GAAhB1D,gBAAgB;AA4JtB,eAAeA,gBAAgpJA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}