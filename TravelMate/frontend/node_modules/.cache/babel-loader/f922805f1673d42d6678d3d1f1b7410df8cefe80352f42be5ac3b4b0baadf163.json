{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\EECS581\\\\TravelMate\\\\frontend\\\\src\\\\components\\\\ItineraryManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ItineraryManager({\n  tripId\n}) {\n  _s();\n  const [activities, setActivities] = useState([]);\n  const [name, setName] = useState('');\n  const [date, setDate] = useState('');\n  const [time, setTime] = useState('');\n  const [location, setLocation] = useState('');\n\n  // Fetch activities for the trip when the component loads\n  useEffect(() => {\n    fetchActivities();\n  }, []);\n  const fetchActivities = async () => {\n    try {\n      const response = await api.get(`/trips/${tripId}/itinerary`);\n      setActivities(response.data);\n    } catch (error) {\n      console.error('Failed to load activities:', error);\n    }\n  };\n  const createActivity = async () => {\n    try {\n      await api.post(`/trips/${tripId}/itinerary/activities`, {\n        name,\n        date,\n        time,\n        location\n      });\n      fetchActivities(); // Refresh activities list after creation\n      setName(''); // Clear input fields\n      setDate('');\n      setTime('');\n      setLocation('');\n    } catch (error) {\n      console.error('Failed to create activity:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Itinerary for Trip \", tripId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Activity Name\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"time\",\n        value: time,\n        onChange: e => setTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Location\",\n        value: location,\n        onChange: e => setLocation(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createActivity,\n        children: \"Add Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Activities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: activities.length > 0 ? activities.map(activity => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [activity.name, \" - \", activity.date, \" at \", activity.time, \" in \", activity.location]\n      }, activity.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No activities found for this trip.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ItineraryManager, \"gAcft6N0XS2g6D/10PPOZxSHLq0=\");\n_c = ItineraryManager;\nexport default ItineraryManager;\n\n/*\r\nimport React, { useState } from 'react';\r\n\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Handle input changes for activity fields\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Handle trip name input change\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value);\r\n  };\r\n\r\n  // Add a new activity to the selected or new trip\r\n  const addActivity = (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      // Check if the trip already exists; if not, create a new entry\r\n      setTrips((prevTrips) => {\r\n        const existingActivities = prevTrips[typedTripName] || [];\r\n        return {\r\n          ...prevTrips,\r\n          [typedTripName]: [...existingActivities, newActivity],\r\n        };\r\n      });\r\n\r\n      // Reset form fields after adding\r\n      setActivity({ name: '', date: '', time: '', location: '' });\r\n      setTypedTripName('');\r\n    } else {\r\n      alert('Please fill out all fields and provide a trip name');\r\n    }\r\n  };\r\n\r\n  // Delete an activity from a specific trip\r\n  const deleteActivity = (tripName, activityIndex) => {\r\n    if (window.confirm(\"Are you sure you want to delete this activity?\")) {\r\n      setTrips((prevTrips) => {\r\n        const updatedActivities = prevTrips[tripName].filter((_, index) => index !== activityIndex);\r\n  \r\n        // If there are no remaining activities, remove the trip entry entirely\r\n        if (updatedActivities.length === 0) {\r\n          const { [tripName]: _, ...remainingTrips } = prevTrips;\r\n          return remainingTrips;\r\n        }\r\n  \r\n        // Otherwise, update the trip with the remaining activities\r\n        return {\r\n          ...prevTrips,\r\n          [tripName]: updatedActivities,\r\n        };\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"itinerary-manager\">\r\n      <h2>Create Itinerary</h2>\r\n\r\n    \r\n      <form onSubmit={addActivity}>\r\n        <div>\r\n          <label>Trip Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tripName\"\r\n            value={typedTripName}\r\n            onChange={handleTripNameChange}\r\n            placeholder=\"Enter trip name or choose an existing one\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={activity.name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={activity.date}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Time:</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={activity.time}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            value={activity.location}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add Activity</button>\r\n      </form>\r\n\r\n    \r\n      <h3>Planned Activities</h3>\r\n      {Object.keys(trips).length > 0 ? (\r\n        Object.keys(trips).map((tripName) => (\r\n          <div key={tripName} className=\"trip-activities\">\r\n            <h4>{tripName}</h4>\r\n            <ul>\r\n              {trips[tripName].map((activity, index) => (\r\n                <li key={index}>\r\n                  <strong>{activity.name}</strong> - {activity.date} at {activity.time}, {activity.location}\r\n                  <button onClick={() => deleteActivity(tripName, index)}>Delete</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No activities added yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItineraryManager;\r\n*/\nvar _c;\n$RefreshReg$(_c, \"ItineraryManager\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","ItineraryManager","tripId","_s","activities","setActivities","name","setName","date","setDate","time","setTime","location","setLocation","fetchActivities","response","get","data","error","console","createActivity","post","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","map","activity","id","_c","$RefreshReg$"],"sources":["C:/Users/taylo/Desktop/EECS581/TravelMate/frontend/src/components/ItineraryManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\nfunction ItineraryManager({ tripId }) {\r\n  const [activities, setActivities] = useState([]);\r\n  const [name, setName] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [time, setTime] = useState('');\r\n  const [location, setLocation] = useState('');\r\n\r\n  // Fetch activities for the trip when the component loads\r\n  useEffect(() => {\r\n    fetchActivities();\r\n  }, []);\r\n\r\n  const fetchActivities = async () => {\r\n    try {\r\n      const response = await api.get(`/trips/${tripId}/itinerary`);\r\n      setActivities(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to load activities:', error);\r\n    }\r\n  };\r\n\r\n  const createActivity = async () => {\r\n    try {\r\n      await api.post(`/trips/${tripId}/itinerary/activities`, {\r\n        name,\r\n        date,\r\n        time,\r\n        location,\r\n      });\r\n      fetchActivities();  // Refresh activities list after creation\r\n      setName('');  // Clear input fields\r\n      setDate('');\r\n      setTime('');\r\n      setLocation('');\r\n    } catch (error) {\r\n      console.error('Failed to create activity:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Itinerary for Trip {tripId}</h2>\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Activity Name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n        <input type=\"date\" value={date} onChange={(e) => setDate(e.target.value)} />\r\n        <input type=\"time\" value={time} onChange={(e) => setTime(e.target.value)} />\r\n        <input type=\"text\" placeholder=\"Location\" value={location} onChange={(e) => setLocation(e.target.value)} />\r\n        <button onClick={createActivity}>Add Activity</button>\r\n      </div>\r\n      <h3>Activities</h3>\r\n      <ul>\r\n        {activities.length > 0 ? (\r\n          activities.map((activity) => (\r\n            <li key={activity.id}>\r\n              {activity.name} - {activity.date} at {activity.time} in {activity.location}\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No activities found for this trip.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItineraryManager;\r\n\r\n/*\r\nimport React, { useState } from 'react';\r\n\r\nconst ItineraryManager = () => {\r\n  const [trips, setTrips] = useState({});\r\n  const [typedTripName, setTypedTripName] = useState('');\r\n  const [activity, setActivity] = useState({\r\n    name: '',\r\n    date: '',\r\n    time: '',\r\n    location: '',\r\n  });\r\n\r\n  // Handle input changes for activity fields\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setActivity((prevActivity) => ({\r\n      ...prevActivity,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  // Handle trip name input change\r\n  const handleTripNameChange = (e) => {\r\n    setTypedTripName(e.target.value);\r\n  };\r\n\r\n  // Add a new activity to the selected or new trip\r\n  const addActivity = (e) => {\r\n    e.preventDefault();\r\n    if (activity.name && activity.date && activity.time && activity.location && typedTripName) {\r\n      const newActivity = { ...activity };\r\n\r\n      // Check if the trip already exists; if not, create a new entry\r\n      setTrips((prevTrips) => {\r\n        const existingActivities = prevTrips[typedTripName] || [];\r\n        return {\r\n          ...prevTrips,\r\n          [typedTripName]: [...existingActivities, newActivity],\r\n        };\r\n      });\r\n\r\n      // Reset form fields after adding\r\n      setActivity({ name: '', date: '', time: '', location: '' });\r\n      setTypedTripName('');\r\n    } else {\r\n      alert('Please fill out all fields and provide a trip name');\r\n    }\r\n  };\r\n\r\n  // Delete an activity from a specific trip\r\n  const deleteActivity = (tripName, activityIndex) => {\r\n    if (window.confirm(\"Are you sure you want to delete this activity?\")) {\r\n      setTrips((prevTrips) => {\r\n        const updatedActivities = prevTrips[tripName].filter((_, index) => index !== activityIndex);\r\n  \r\n        // If there are no remaining activities, remove the trip entry entirely\r\n        if (updatedActivities.length === 0) {\r\n          const { [tripName]: _, ...remainingTrips } = prevTrips;\r\n          return remainingTrips;\r\n        }\r\n  \r\n        // Otherwise, update the trip with the remaining activities\r\n        return {\r\n          ...prevTrips,\r\n          [tripName]: updatedActivities,\r\n        };\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div className=\"itinerary-manager\">\r\n      <h2>Create Itinerary</h2>\r\n\r\n    \r\n      <form onSubmit={addActivity}>\r\n        <div>\r\n          <label>Trip Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"tripName\"\r\n            value={typedTripName}\r\n            onChange={handleTripNameChange}\r\n            placeholder=\"Enter trip name or choose an existing one\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={activity.name}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Date:</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"date\"\r\n            value={activity.date}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Time:</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"time\"\r\n            value={activity.time}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Location:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"location\"\r\n            value={activity.location}\r\n            onChange={handleInputChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add Activity</button>\r\n      </form>\r\n\r\n    \r\n      <h3>Planned Activities</h3>\r\n      {Object.keys(trips).length > 0 ? (\r\n        Object.keys(trips).map((tripName) => (\r\n          <div key={tripName} className=\"trip-activities\">\r\n            <h4>{tripName}</h4>\r\n            <ul>\r\n              {trips[tripName].map((activity, index) => (\r\n                <li key={index}>\r\n                  <strong>{activity.name}</strong> - {activity.date} at {activity.time}, {activity.location}\r\n                  <button onClick={() => deleteActivity(tripName, index)}>Delete</button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No activities added yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItineraryManager;\r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}